Index: app/src/main/java/se/iths/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * This Java source file was generated by the Gradle 'init' task.\r\n */\r\npackage se.iths;\r\n\r\n\r\nimport se.iths.pojo.Album;\r\nimport se.iths.pojo.Artist;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\n\r\npublic class App {\r\n\r\n/*\r\n    public static void main(String[] args) throws SQLException {\r\n\r\n        Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/iths\",\"iths\", \"iths\");\r\n        ResultSet rs = connection.createStatement().executeQuery(\"SELECT * FROM test\");\r\n\r\n        while(rs.next()){\r\n            System.out.println( rs.getString(1) +\" \"+rs.getString(2));\r\n\r\n        }\r\n\r\n        PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO test (name,age) VALUES (?,?)\");\r\n        preparedStatement.setString(1,\"Dr.Alban\");\r\n        preparedStatement.setInt(2, 50);\r\n        preparedStatement.execute();\r\n\r\n        connection.close();\r\n\r\n    }\r\n*/\r\n\r\n\r\n  /*  public static void main(String[] args) {\r\n    App app = new App();\r\n\r\n    try {\r\n        app.load();\r\n    }catch (SQLException e) {\r\n        System.out.println(\"error\" + e);\r\n    }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    private void load() throws SQLException{\r\n        List<Artist> artists = loadArtists();\r\n        for(Artist i: artists){\r\n            System.out.println(i);\r\n        }\r\n\r\n    }\r\n\r\n    private List<Artist> loadArtists() throws SQLException{\r\n        List<Artist> artists = new ArrayList<>();\r\n\r\n        Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/Chinook\", \"iths\", \"iths\");\r\n        ResultSet resultSet = connection.createStatement().executeQuery(\"SELECT * FROM Artist\");\r\n\r\n        while(resultSet.next()){\r\n            int id = resultSet.getInt(1);\r\n            String name = resultSet.getString(2);\r\n            Artist artist = new Artist(id,name);\r\n            artists.add(artist);\r\n\r\n            List<Album> albums = loadAlbums(artist.getId());\r\n            for(Album i: albums){\r\n                System.out.println(i);\r\n            }\r\n        }\r\n        resultSet.close();\r\n        connection.close();\r\n        return artists;\r\n\r\n    }\r\n\r\n    private List<Album> loadAlbums(int artistId) throws SQLException{\r\n        Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/Chinook\", \"iths\",\"iths\");\r\n        List<Album> albums = new ArrayList<>();\r\n\r\n        PreparedStatement preparedStatement = connection.prepareStatement(\"SELECT Title FROM Album WHERE ArtistId=?\");\r\n        preparedStatement.setInt(1,artistId);\r\n        ResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n        while(resultSet.next()){\r\n            int id = resultSet.getInt(1);\r\n            String name =resultSet.getString(2);\r\n            Album album = new Album(id,name);\r\n            albums.add(album);\r\n        }\r\n        resultSet.close();\r\n        connection.close();\r\n\r\n        return albums;\r\n\r\n    }\r\n*/\r\n\r\n    public static void main(String[] args)  {\r\n        App app = new App();\r\n        try {\r\n            app.load();\r\n        } catch (SQLException e) {\r\n            System.err.println(String.format(\"Något gick fel vid inläsning av databas! (%s)\", e.toString()));\r\n        }\r\n    }\r\n\r\n    private void load() throws SQLException {\r\n        Collection<Artist> artists = loadArtists();\r\n        for(Artist artist: artists){\r\n            System.out.println(artist);\r\n        }\r\n    }\r\n\r\n    private Collection<Artist>  loadArtists() throws SQLException {\r\n        Collection<Artist> artists = new ArrayList<>();\r\n        Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/Chinook\", \"iths\", \"iths\");\r\n        ResultSet rs = con.createStatement().executeQuery(\"SELECT ArtistId, AlbumId, Name, Title FROM Artist JOIN Album USING (ArtistId) ORDER BY ArtistId\");\r\n        while(rs.next()){\r\n            int id = rs.getInt(\"ArtistId\");\r\n            String name = rs.getString(\"Name\");\r\n            Artist artist = new Artist(id, name);\r\n            artists.add(artist);\r\n            Collection<Album> albums = loadAlbums(artist.getId());\r\n            for(Album i : albums) {\r\n                artist.add(i);\r\n            }\r\n        }\r\n        rs.close();\r\n        con.close();\r\n        return artists;\r\n    }\r\n    private Collection<Album> loadAlbums(int artistId) throws  SQLException{\r\n        Connection con  = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/Chinook\", \"iths\", \"iths\");\r\n        Collection<Album> albums = new ArrayList<>();\r\n\r\n        PreparedStatement stmt = con.prepareStatement(\"SELECT AlbumId,Title FROM Album WHERE ArtistId =?\");\r\n        stmt.setInt(1, artistId);//Sätt värde för första frågetecknet\r\n        ResultSet rs = stmt.executeQuery();\r\n        while(rs.next()){\r\n            int id = rs.getInt(1);\r\n            String title = rs.getString(2);\r\n            Album album = new Album(id, title);\r\n            albums.add(album);\r\n        }\r\n        stmt.close();\r\n        rs.close();\r\n        con.close();\r\n        return albums;\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/se/iths/App.java b/app/src/main/java/se/iths/App.java
--- a/app/src/main/java/se/iths/App.java	
+++ b/app/src/main/java/se/iths/App.java	
@@ -13,94 +13,7 @@
 
 public class App {
 
-/*
-    public static void main(String[] args) throws SQLException {
-
-        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/iths","iths", "iths");
-        ResultSet rs = connection.createStatement().executeQuery("SELECT * FROM test");
-
-        while(rs.next()){
-            System.out.println( rs.getString(1) +" "+rs.getString(2));
-
-        }
-
-        PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO test (name,age) VALUES (?,?)");
-        preparedStatement.setString(1,"Dr.Alban");
-        preparedStatement.setInt(2, 50);
-        preparedStatement.execute();
-
-        connection.close();
-
-    }
-*/
-
-
-  /*  public static void main(String[] args) {
-    App app = new App();
-
-    try {
-        app.load();
-    }catch (SQLException e) {
-        System.out.println("error" + e);
-    }
-
-
-
-
-    }
-
-    private void load() throws SQLException{
-        List<Artist> artists = loadArtists();
-        for(Artist i: artists){
-            System.out.println(i);
-        }
-
-    }
-
-    private List<Artist> loadArtists() throws SQLException{
-        List<Artist> artists = new ArrayList<>();
-
-        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/Chinook", "iths", "iths");
-        ResultSet resultSet = connection.createStatement().executeQuery("SELECT * FROM Artist");
-
-        while(resultSet.next()){
-            int id = resultSet.getInt(1);
-            String name = resultSet.getString(2);
-            Artist artist = new Artist(id,name);
-            artists.add(artist);
-
-            List<Album> albums = loadAlbums(artist.getId());
-            for(Album i: albums){
-                System.out.println(i);
-            }
-        }
-        resultSet.close();
-        connection.close();
-        return artists;
-
-    }
-
-    private List<Album> loadAlbums(int artistId) throws SQLException{
-        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/Chinook", "iths","iths");
-        List<Album> albums = new ArrayList<>();
-
-        PreparedStatement preparedStatement = connection.prepareStatement("SELECT Title FROM Album WHERE ArtistId=?");
-        preparedStatement.setInt(1,artistId);
-        ResultSet resultSet = preparedStatement.executeQuery();
 
-        while(resultSet.next()){
-            int id = resultSet.getInt(1);
-            String name =resultSet.getString(2);
-            Album album = new Album(id,name);
-            albums.add(album);
-        }
-        resultSet.close();
-        connection.close();
-
-        return albums;
-
-    }
-*/
 
     public static void main(String[] args)  {
         App app = new App();
